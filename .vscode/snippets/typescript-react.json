{
  "import react": {
    "prefix": "imr",
    "body": "import * as React from 'react';"
  },
  "import connect": {
    "prefix": "imconn",
    "body": "import { connect } from 'react-redux';"
  },
  "React Component Class": {
    "prefix": "tsrcc",
    "body": [
      "import * as React from 'react';",
      "",
      "class $1 extends React.Component<any, any>{",
      "  render(){",
      "    return (",
      "      <div>",
      "        $1",
      "      </div>",
      "    );",
      "  }",
      "}",
      "",
      "export default $1;"
    ]
  },
  "Destructuring State": {
    "prefix": "destate",
    "body": ["const { $1 } = this.state;", ""]
  },
  "Destructuring Props": {
    "prefix": "desprops",
    "body": ["const { $1 } = this.props;", ""]
  },
  "Import react": {
    "prefix": "ire",
    "body": ["import * as React from 'react';"]
  },
  "Import react-redux connect": {
    "prefix": "icnn",
    "body": ["import { connect } from 'react-redux';"]
  },
  "Import classnames": {
    "prefix": "icl",
    "body": ["import * as classnames from 'classnames';"]
  },
  "import baseView": {
    "prefix": "ibaseview",
    "body": ["import BaseView from '../view';"]
  },
  "import container": {
    "prefix": "icontainer",
    "body": ["import Container from './container';"]
  },
  "i18n_resource": {
    "prefix": "i18n_resource",
    "body":
      "require('i18n!?Resource.${1|Account,Catalog,Stock,Retail,Finance,AccountNamespace,RetailNamespace|}.${2|ACL,NamespacePlan,Namespace,User,Brand,Product,ProductGroup,ProductGroupIdentifier,ShippingAddress,ShoppingCart,Order,Tag,Collection,Pricing|}.${3|id,name,namespace,namespacePlanId,roles,roleNames,aclNames,description.title,description.description,description.logoLink,description.contact.emailAddress,description.contact.phoneNumber,description.contact.gender,description.contact.avatarLink|}')()"
  },
  "i18n_view": {
    "prefix": "i18n_view",
    "body":
      "require('i18n!?View.${1|Account,Catalog,Stock,Retail,Finance,AccountNamespace,RetailNamespace|}.${2|ACL,NamespacePlan,Namespace,User,Brand,Product,ProductGroup,ProductGroupIdentifier,ShippingAddress,ShoppingCart,Order,Tag,Collection,Pricing|}.${3|Info|}')()"
  },
  "i18n_common": {
    "prefix": "i18n_common",
    "body": "require('i18n!?Common.${1|FormAction|}.$2')()"
  },
  "i18n_support": {
    "prefix": "i18n_support",
    "body": "require('i18n!?Support.${1|Type|}.$2')()"
  },
  "crud": {
    "prefix": "crud",
    "body": [
      "import {",
      "  SDK,",
      "  IXrcApiCommerce${2|Account,Catalog,Account,Stock,Retail,Finance,Order|}V1${1:Resource} as Resource,",
      "  IXrcApiCommerce${2|Account,Catalog,Account,Stock,Retail,Finance,Order|}V1List${1:Resource}sResponse as ListResponse,",
      "  IXrcApiCommerce${2|Account,Catalog,Account,Stock,Retail,Finance,Order|}V1Create${1:Resource}Request as CreateRequest,",
      "  IXrcApiCommerce${2|Account,Catalog,Account,Stock,Retail,Finance,Order|}V1Update${1:Resource}Request as UpdateRequest,",
      "  IXrcApiCommerce${2|Account,Catalog,Account,Stock,Retail,Finance,Order|}V1Delete${1:Resource}Request as DeleteRequest,",
      "} from '@ecnova/sdk-js-system';",
      "import { Container, Controller, GeneratedViewProps, IFormController } from '../../';",
      "import { ConfigProps } from 'redux-form';",
      "",
      "",
      "const apiService :SDK = window['gateway'];",
      "const RESOURCE_NAME = '${5:camelResourceName}';",
      "const COLLECTION_NAME = '${5:camelResourceName}s';",
      "",
      "export class BaseController<ViewData> extends Controller<ViewData>{",
      "  static resourceName = RESOURCE_NAME",
      "  static collectionName = COLLECTION_NAME",
      "  static getAPI() {",
      "    return apiService.${3|account,stock,retail,catalog,finance|}${4|System,NS,User|}Service;",
      "  }",
      "}",
      "",
      "export abstract class BaseFormController<FormData=any> extends BaseController<Resource> implements IFormController<FormData> {",
      "  abstract mapPropsToForm(): ConfigProps<FormData>;",
      "",
      "  // Implement for IFormController, used for identifier of redux-form",
      "  get formId() {",
      "    return `${this.staticMethods.getMethod()}${this.staticMethods.getResourceName('pascal')}Form`;",
      "  }",
      "  mapPropsToView(): GeneratedViewProps<Resource> & ConfigProps<FormData> {",
      "    return { ...super.mapPropsToView(), ...this.mapPropsToForm() };",
      "  }",
      "}",
      "",
      "",
      "/**",
      " * Container",
      " */",
      "export class ${1:Resource}Container extends Container{",
      "}",
      "",
      "",
      "/**",
      " * List controller",
      " */",
      "export class ${1:Resource}CollectionController extends BaseController<ListResponse> {",
      "  static getMethod() {",
      "    return 'list';",
      "  }",
      "}",
      "",
      "",
      "/**",
      " * Detail controller",
      " */",
      "export class ${1:Resource}DetailController extends BaseController<Resource> {",
      "  static getMethod() {",
      "    return 'get';",
      "  }",
      "}",
      "",
      "",
      "/**",
      " * Create controller",
      " */",
      "export class ${1:Resource}CreateController extends BaseFormController<CreateRequest> {",
      "  static getMethod() {",
      "    return 'create';",
      "  }",
      "  mapPropsToForm(): ConfigProps<CreateRequest> {",
      "    return {",
      "      form: this.formId,",
      "      initialValues: this.populateFormData(),",
      "      onSubmit: this.props.api.create,",
      "    }",
      "  }",
      "}",
      "",
      "",
      "/**",
      " * Update Controller",
      " */",
      "export class ${1:Resource}UpdateController extends BaseFormController<UpdateRequest> {",
      "  static getMethod() {",
      "    return 'update';",
      "  }",
      "  mapPropsToForm(): ConfigProps<UpdateRequest> {",
      "    return {",
      "      form: this.formId,",
      "      initialValues: this.populateFormData(),",
      "      onSubmit: this.props.api.update,",
      "    }",
      "  }",
      "}",
      "",
      "",
      "/**",
      " * Delete controller",
      " */",
      "export class ${1:Resource}DeleteController extends BaseFormController<DeleteRequest> {",
      "  static getMethod() {",
      "    return 'delete';",
      "  }",
      "  mapPropsToForm(): ConfigProps<DeleteRequest> {",
      "    return {",
      "      form: this.formId,",
      "      initialValues: this.populateFormData(),",
      "      onSubmit: this.props.api.delete,",
      "    }",
      "  }",
      "}"
    ]
  },
  "crudview": {
    "prefix": "crudview",
    "body": [
      "import * as React from 'react';",
      "import * as classnames from 'classnames';",
      "import * as path from 'object-path';",
      "import * as Flexbox from 'react-flexbox-grid';",
      "import * as Blueprint from '@blueprintjs/core';",
      "import * as BlueprintLab from '@blueprintjs/labs';",
      "import * as UI from '../../../components';",
      "import {",
      "  IXrcApiCommerce${2|Account,Catalog,Account,Stock,Retail,Finance,File|}V1${1:Resource} as Resource,",
      "  IXrcApiCommerce${2|Account,Catalog,Account,Stock,Retail,Finance,File|}V1List${1:Resource}sResponse as ListResponse,",
      "  IXrcApiCommerce${2|Account,Catalog,Account,Stock,Retail,Finance,File|}V1Create${1:Resource}Request as CreateRequest,",
      "  IXrcApiCommerce${2|Account,Catalog,Account,Stock,Retail,Finance,File|}V1Update${1:Resource}Request as UpdateRequest,",
      "  IXrcApiCommerce${2|Account,Catalog,Account,Stock,Retail,Finance,File|}V1Delete${1:Resource}Request as DeleteRequest,",
      "} from '@ecnova/sdk-js-system';",
      "import {",
      "  ${1:Resource}Container,",
      "  ${1:Resource}CollectionController,",
      "  ${1:Resource}CreateController,",
      "  ${1:Resource}UpdateController,",
      "  ${1:Resource}DeleteController,",
      "} from '../../../../packages/sdk-react/${3|account,stock,retail,catalog,finance,file|}/${4|acl,namespace-plan,namespace,user,brand,product,variant-product,display-product,display-variant-product,shipping-address,shopping-cart,collection,order,tag,pricing|}/${5|system,ns,user|}';",
      "import { BaseView, BaseFormView, SelectViewPassedProps, MultipleSelectViewPassedProps, ICollectionFilter, ICollectionProps } from '../../base';",
      "import { FormSection, Field, FieldArray } from 'redux-form';",
      "import { getSpecifiedLanguageDetails } from '../../../config/types';",
      "",
      "",
      "// Constants",
      "const COLLECTION_PAGE_TITLE = require('i18n!?View.${6:Service}.${1:Resource}.CollectionPageTitle')();",
      "const CREATE_VIEW_TITLE = require('i18n!?View.${6:Service}.${1:Resource}.CreateViewTitle')();",
      "const UPDATE_VIEW_TITLE = require('i18n!?View.${6:Service}.${1:Resource}.UpdateViewTitle')();",
      "const SELECT_PLACEHOLDER = require('i18n!?View.${6:Service}.${1:Resource}.selectPlaceholder')();",
      "",
      "",
      "const ${1:Resource}Table = UI.UITable.ofType<Resource>();",
      "const columns: UI.ITableColumnProps<Resource>[] = [",
      "  {",
      "    id: 'id',",
      "    primary: true,",
      "    name: require('i18n!?Resource.${6:Service}.${1:Resource}.id')(),",
      "    renderCell: item => item.id",
      "  },",
      "  // TODO: More columns",
      "];",
      "",
      "",
      "/**",
      " * Collection page",
      " */",
      "export class ${1:Resource}CollectionPage extends BaseView<ListResponse> {",
      "  onNavigatorEvent({ id }) {",
      "    let Container = ${1:Resource}Container, Controller, View, data;",
      "    switch (id) {",
      "      case 'add':",
      "        Controller = ${1:Resource}CreateController;",
      "        View = ${1:Resource}CreateView;",
      "        break;",
      "      default:",
      "        return;",
      "    }",
      "    this.navigator.openModal({ Container, Controller, View });",
      "  }",
      "  render() {",
      "    return (",
      "      <UI.CollectionPage",
      "        titleRenderer={() => COLLECTION_PAGE_TITLE}",
      "        headerActions={",
      "          <Blueprint.Button",
      "            iconName='plus'",
      "            intent={Blueprint.Intent.SUCCESS}",
      "            onClick={() => this.onNavigatorEvent({ id: 'add' })}",
      "          />",
      "        }",
      "        bodyRenderer={() =>",
      "          <${1:Resource}Collection {...this.props} />",
      "        }",
      "      />",
      "    );",
      "  }",
      "}",
      "",
      "",
      "interface I${1:Resource}Filter {",
      "}",
      "",
      "",
      "/**",
      " * Collection",
      " */",
      "export class ${1:Resource}Collection extends BaseView<ListResponse, ICollectionProps<I${1:Resource}Filter>> {",
      "  render() {",
      "    const { pending, ready, error, data, requestParams, filter } = this.props;",
      "    const { ${7:collectionFieldName}, totalSize, nextPageToken } = data;",
      "",
      "    return (",
      "      <${1:Resource}Table",
      "        data={${7:collectionFieldName}}",
      "        columns={columns}",
      "        ready={ready}",
      "        error={error}",
      "        onItemClick={this.navigator.push}",
      "        pagination={{",
      "          page: this.props.page,",
      "          pageSize: this.props.pageSize,",
      "          totalSize: this.props.data && this.props.data.totalSize,",
      "          hasMore: this.props.data && !!this.props.data.nextPageToken,",
      "        }}",
      "        onPaginationChange={payload => this.navigator.setQuery({ ...payload, filter })}",
      "      />",
      "    );",
      "  }",
      "}",
      "",
      "",
      "/**",
      " * Detail Page",
      " */",
      "export class ${1:Resource}DetailPage extends BaseView<Resource>{",
      "  onNavigatorEvent({ id }) {",
      "    let Container = ${1:Resource}Container, data = this.props.data, Controller, View;",
      "    switch (id) {",
      "      case 'edit':",
      "        Controller = ${1:Resource}UpdateController;",
      "        View = ${1:Resource}UpdateView;",
      "        break;",
      "      case 'delete':",
      "        Controller = ${1:Resource}DeleteController;",
      "        View = ${1:Resource}DeleteView;",
      "        break;",
      "      default:",
      "        return;",
      "    }",
      "    this.navigator.openModal({ Container, Controller, View, data });",
      "  }",
      "",
      "  render() {",
      "    const { pending, ready, error, data } = this.props;",
      "    return (",
      "      <UI.DetailPage",
      "        ready={ready}",
      "        error={error}",
      "        canBack={true}",
      "        onBack={this.navigator.pop}",
      "        onNavigatorEvent={this.onNavigatorEvent.bind(this)}",
      "        titleRenderer={() => ",
      "          /** TODO:  */",
      "          data.id",
      "        }",
      "        bodyRenderer={() =>",
      "          /** TODO:  */",
      "          <Flexbox.Grid fluid>",
      "            <Flexbox.Row>",
      "              <Flexbox.Col md={8}>",
      "                {/* TODO: */}",
      "              </Flexbox.Col>",
      "              <Flexbox.Col md={4}>",
      "                {/* TODO: */}",
      "              </Flexbox.Col>",
      "            </Flexbox.Row>",
      "          </Flexbox.Grid>",
      "        }",
      "      />",
      "    )",
      "  }",
      "}",
      "",
      "",
      "const ${1:Resource}Form = UI.UIForm;",
      "",
      "",
      "/**",
      " * Create form",
      " */",
      "export class ${1:Resource}CreateView extends BaseFormView<Resource, CreateRequest> {",
      "  render() {",
      "    const { form, initialValues, onSubmit } = this.props;",
      "",
      "    return (",
      "      <${1:Resource}Form",
      "        form={form}",
      "        initialValues={initialValues}",
      "        onSubmit={onSubmit}",
      "        onSubmitSuccess={result => {",
      "          this.props.dismissModal();",
      "          this.navigator.push(result);",
      "        }}",
      "        title={CREATE_VIEW_TITLE}",
      "        theme='dialog'",
      "        intent='create'",
      "        onCancel={this.props.dismissModal}",
      "      >",
      "        {/* TODO:  Create form */}",
      "      </${1:Resource}Form>",
      "    );",
      "  }",
      "}",
      "",
      "",
      "/**",
      " * Update form",
      " */",
      "export class ${1:Resource}UpdateView extends BaseFormView<Resource, UpdateRequest> {",
      "  render() {",
      "    const { form, initialValues, onSubmit } = this.props;",
      "    return (",
      "      <${1:Resource}Form",
      "        form={form}",
      "        initialValues={initialValues}",
      "        onSubmit={onSubmit}",
      "        onSubmitSuccess={this.props.dismissModal}",
      "        title={UPDATE_VIEW_TITLE}",
      "        theme='dialog'",
      "        intent='update'",
      "        onCancel={this.props.dismissModal}",
      "      >",
      "        {/* TODO:  Update form */}",
      "      </${1:Resource}Form>",
      "    );",
      "  }",
      "}",
      "",
      "",
      "/**",
      " * Delete form",
      " */",
      "export class ${1:Resource}DeleteView extends BaseFormView<Resource, DeleteRequest> {",
      "  render() {",
      "    const { form, initialValues, onSubmit } = this.props;",
      "    return (",
      "      <${1:Resource}Form",
      "        form={form}",
      "        initialValues={initialValues}",
      "        onSubmit={onSubmit}",
      "        onSubmitSuccess={this.props.dismissModal}",
      "        theme='alert'",
      "        intent='delete'",
      "        onCancel={this.props.dismissModal}",
      "      >",
      "        {/* TODO:  Delete form */}",
      "      </${1:Resource}Form>",
      "    );",
      "  }",
      "}",
      "",
      "",
      "/**",
      "* Select",
      "*/",
      "export class ${1:Resource}SelectView extends BaseView<ListResponse, SelectViewPassedProps> {",
      "  render() {",
      "    const { ready, data, value, onChange, disabled } = this.props;",
      "    return (",
      "      <UI.SelectView",
      "        value={value}",
      "        items={ready ? data.${7:collectionFieldName} : []}",
      "        placeholder={SELECT_PLACEHOLDER}",
      "        valueAccessor={valueAccessor}",
      "        valueRenderer={valueRenderer}",
      "        predicateValuesAccessor={predicateValuesAccessor}",
      "        onChange={onChange}",
      "        disabled={disabled}",
      "      />",
      "    );",
      "  }",
      "}",
      "",
      "",
      "/**",
      "* Multiple Select",
      "*/",
      "export class ${1:Resource}MultipleSelectView extends BaseView<ListResponse, MultipleSelectViewPassedProps> {",
      "  render() {",
      "    const {",
      "      ready,",
      "      data,",
      "      values = [],",
      "      onSelect,",
      "      onRemove,",
      "      disabled,",
      "    } = this.props;",
      "    return (",
      "      <UI.MultipleSelectView",
      "        items={ready ? data.${7:collectionFieldName} : []}",
      "        values={values}",
      "        placeholder={SELECT_PLACEHOLDER}",
      "        valueRenderer={valueRenderer}",
      "        valueAccessor={valueAccessor}",
      "        predicateValuesAccessor={predicateValuesAccessor}",
      "        onAdd={onSelect}",
      "        onRemove={onRemove}",
      "        disabled={disabled}",
      "      />",
      "    )",
      "  }",
      "}",
      "",
      "",
      "const valueAccessor = item => item.id;",
      "const valueRenderer = item => item.id;",
      "const predicateValuesAccessor = valueRenderer;"
    ]
  }
}
